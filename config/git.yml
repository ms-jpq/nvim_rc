---
https://github.com/ms-jpq/chadtree:
  mvp: &mvp True
  call:
    - - rm
      - -fr
      - --
      - .vars/runtime
    - - python3
      - -m
      - chadtree
      - deps
  # vals:
  #   chadtree_settings:
  #     theme.icon_glyph_set: ascii
  keys:
    - maps:
        "<leader>v": "<cmd>CHADopen<cr>"
      modes: n

https://github.com/ms-jpq/coq_nvim:
  mvp: *mvp
  call:
    - - rm
      - -fr
      - --
      - .vars/runtime
    - - python3
      - -m
      - coq
      - deps
  vals:
    coq_settings:
      auto_start: True
      clients:
        registers.lines: ["z"]
        snippets.user_path: |-
          ~/.config/nvim/pack/modules/start/snips
      keymap:
        eval_snips: "<leader>B"
        repeat: "<leader>."
  keys:
    - modes: n
      maps:
        "<leader>z": "<cmd>CHADrestore<cr>"
  lua: |-
    if vim.env.SSH_TTY or #vim.api.nvim_get_runtime_file(".nvim/t9", {}) ~= 0 then
      local v = vim.g.coq_settings
      v["clients.tabnine.enabled"] = true
      vim.g.coq_settings = v
    end

https://github.com/nvim-treesitter/nvim-treesitter:
  call:
    - - nvim
      - --headless
      - -u
      - NONE
      - +packadd nvim-treesitter
      # - +TSInstallSync all
      - +TSUpdateSync
      - +quitall
  lua: |-
    local opts = vim.g.ts_opts
    opts.auto_install = vim.fn.has("win32") == 0
    require("nvim-treesitter.configs").setup(opts)
    vim.o.foldmethod = "expr"
    vim.o.foldexpr = "v:lua.vim.treesitter.foldexpr()"
  vals:
    ts_opts:
      # ensure_installed: all
      highlight:
        enable: True
      incremental_selection:
        enable: True
        keymaps:
          init_selection: "+"
          node_decremental: "_"
          node_incremental: "+"
      # indent:
      #   enable: True
      textobjects:
        lsp_interop:
          enable: True
          peek_definition_code:
            L: "@function.outer"
            M: "@class.outer"
        select:
          enable: True
          lookahead: True
          keymaps:
            aa: "@parameter.outer"
            ab: "@block.outer"
            ac: "@conditional.outer"
            aC: "@class.outer"
            af: "@function.outer"
            aF: "@call.outer"
            aL: "@loop.outer"
            as: "@statement.outer"
            ia: "@parameter.inner"
            ib: "@block.inner"
            ic: "@conditional.inner"
            iC: "@class.inner"
            if: "@function.inner"
            iF: "@call.inner"
            iL: "@loop.inner"
            is: "@statement.outer"
        move:
          enable: True
          set_jumps: True
          goto_next_start:
            "][": "@statement.outer"
            "]m": "@block.outer"
          goto_next_end:
            "]]": "@statement.outer"
            "]M": "@block.outer"
          goto_previous_start:
            "[[": "@statement.outer"
            "[m": "@block.outer"
          goto_previous_end:
            "[]": "@statement.outer"
            "[M": "@block.outer"
        swap:
          enable: True
          swap_previous:
            <leader><left>: "@statement.outer"
            <leader><up>: "@block.outer"
          swap_next:
            <leader><right>: "@statement.outer"
            <leader><down>: "@block.outer"

https://github.com/nvim-treesitter/nvim-treesitter-textobjects: {}

https://github.com/nvim-treesitter/nvim-treesitter-context:
  lub: |-
    require("treesitter-context").setup(vim.g.tsc_opts)
  vals:
    tsc_opts:
      multiline_threshold: 1

https://github.com/neovim/nvim-lspconfig:
  mvp: *mvp

https://github.com/ms-jpq/coq.thirdparty:
  mvp: *mvp
  lua: |-
    require("coq_3p")(vim.g.COQ3p)
  vals:
    COQ3p:
      - short_name: nLUA
        src: nvimlua

      # - src: builtin/ada
      # - src: builtin/c
      # - src: builtin/clojure
      # - src: builtin/css
      # - src: builtin/haskell
      # - src: builtin/html
      # - src: builtin/js
      # - src: builtin/php
      # - src: builtin/xml

      - accept_key: <c-f>
        short_name: COP
        src: copilot
      - short_name: COD
        src: codeium
      - short_name: TAB
        src: tabby

      - src: repl
      # - short_name: MATH
      #   src: bc
      # - short_name: BIG
      #   src: figlet
      #   trigger: "!big"
      # - src: cow
      #   trigger: "!cow"
      # - src: vimtex
      #   short_name: vTEX

https://github.com/ms-jpq/snips:
  mvp: *mvp

https://github.com/ms-jpq/coq.artifacts:
  mvp: *mvp

https://github.com/junegunn/fzf:
  mvp: *mvp

https://github.com/junegunn/fzf.vim:
  mvp: *mvp
  keys:
    - maps:
        "<leader>h": "<cmd>History:<cr>"
        "<leader>H": "<cmd>History/<cr>"
        "<leader>y": "<cmd>GFiles?<cr>"
        "<leader>Y": "<cmd>GFiles<cr>"
        "<leader>m": "<cmd>Jumps<cr>"
        "<leader>M": "<cmd>Marks<cr>"
        "<leader>o": "<cmd>BLines<cr>"
        "<leader>p": "<cmd>Buffers<cr>"
        "<leader>P": "<cmd>Files<cr>"
      modes: n
    - maps:
        "<leader>O": ":Rg "
      modes: n
      opts:
        silent: False
  lua: |-
    local fzf_opts = vim.env.FZF_DEFAULT_OPTS or ""
    local new_opts = fzf_opts .. " --no-border"
    vim.env.FZF_DEFAULT_OPTS = new_opts
  vals:
    fzf_layout:
      window:
        height: 0.96
        width: 0.96
    fzf_vim:
      buffers_jump: true
      preview_window:
        - right:wrap

https://github.com/folke/flash.nvim:
  keys:
    - modes: nxo
      maps:
        s: '<cmd>lua require("flash").jump()<cr>'
        S: '<cmd>lua require("flash").treesitter()<cr>'
    - modes: o
      maps:
        B: '<cmd>lua require("flash").remote()<cr>'
    - modes: xo
      maps:
        F: '<cmd>lua require("flash").treesitter_search()<cr>'

https://github.com/tpope/vim-repeat:
  mvp: *mvp

https://github.com/tpope/vim-surround:
  mvp: *mvp

https://github.com/junegunn/vim-easy-align:
  mvp: *mvp
  keys:
    - modes: nv
      opts:
        noremap: False
      maps:
        "ga": "<plug>(EasyAlign)"

https://github.com/tpope/vim-unimpaired:
  mvp: *mvp

https://github.com/cocopon/iceberg.vim:
  mvp: *mvp
  lua: |-
    vim.cmd [[colorscheme iceberg]]

# https://github.com/EdenEast/nightfox.nvim:
#   lua: |-
#     vim.cmd [[colorscheme dayfox]]

https://github.com/lewis6991/gitsigns.nvim:
  opt: true
  lub: |-
    require('gitsigns').setup(vim.g.git_opts)
    local gs = package.loaded.gitsigns
    for key, val in pairs(vim.g.git_keys) do
      vim.keymap.set('n', key, gs[val])
    end
  vals:
    git_opts:
      current_line_blame: True
      # show_deleted: True
      # word_diff: True
    git_keys:
      "[s": prev_hunk
      "]s": next_hunk
      <leader>A: diffthis
      <leader>S: undo_stage_hunk
      <leader>a: preview_hunk
      <leader>c: reset_hunk
      <leader>s: stage_hunk

# https://github.com/norcalli/nvim-colorizer.lua:
#   opt: true
#   lub: |-
#     require('colorizer').setup()

https://github.com/github/copilot.vim:
  call:
    - - sh
      - -c
      - |-
        printf -- %s '{}' >./package.json
  opt: true
  lub: |-
    vim.cmd [[Copilot enable]]

https://github.com/Exafunction/codeium.vim:
  opt: true
  vals:
    codeium_no_map_tab: True
    codeium_render: False
# https://github.com/lervag/vimtex:
#   opt: true
#   vals:
#     vimtex_compiler_method: tectonic
#     vimtex_view_enabled: false
